{"version":3,"sources":["webpack:///./node_modules/echarts-wordcloud/src/wordCloud.js","webpack:///./node_modules/echarts-wordcloud/src/WordCloudSeries.js","webpack:///./node_modules/echarts-wordcloud/src/layout.js","webpack:///./node_modules/echarts-wordcloud/index.js","webpack:///./node_modules/echarts-wordcloud/src/WordCloudView.js"],"names":["echarts","layoutUtil","wordCloudLayoutHelper","isSupported","Error","registerLayout","ecModel","api","eachSeriesByType","seriesModel","gridRect","getLayoutRect","getBoxLayoutParams","width","getWidth","height","getHeight","data","getData","canvas","document","createElement","ctx","getContext","maskImage","get","drawImage","maskCanvas","imageData","getImageData","newImageData","createImageData","toneSum","toneCnt","i","length","tone","threshold","putImageData","updateCanvasMask","e","console","error","toString","sizeRange","rotationRange","valueExtent","getDataExtent","DEGREE_TO_RAD","Math","PI","gridSize","onWordCloudDrawn","item","detail","drawn","layoutInstance","ondraw","gx","x","gy","y","list","mapArray","value","idx","itemModel","getItemModel","getName","number","linearMap","sort","a","b","fontFamily","fontWeight","ellipticity","minRotation","maxRotation","clearCanvas","rotateRatio","rotationStep","drawOutOfBound","shuffle","shape","addEventListener","dispose","removeEventListener","preventDefault","registerPreprocessor","option","series","util","isArray","compats","compatTextStyle","textStyle","each","key","hasOwnProperty","format","capitalFirst","seriesItem","type","normal","emphasis","completeDimensions","extendSeriesModel","visualColorAccessPath","optionUpdated","this","max","floor","getInitialData","dimensions","List","initData","defaultOption","left","top","minFontSize","shuffleArray","WordCloud","window","setImmediate","msSetImmediate","webkitSetImmediate","mozSetImmediate","oSetImmediate","postMessage","callbacks","undefined","message","evt","substr","stopImmediatePropagation","id","parseInt","clearImmediate","callback","push","fn","setTimeout","msClearImmediate","webkitClearImmediate","mozClearImmediate","oClearImmediate","timer","clearTimeout","fillText","Array","prototype","some","hanWidth","mWidth","size","font","measureText","arr","j","random","elements","options","forEach","el","getElementById","tagName","appendChild","settings","color","minSize","weightFactor","backgroundColor","origin","drawMask","maskColor","maskGapWidth","wait","abortThreshold","abort","classes","hover","click","factor","pt","theta","sin","thetaPrime","cos","sqrt","grid","ngx","ngy","center","maxRadius","escapeTime","getTextColor","g","maskRectWidth","abs","min","random_hsl_color","getTextClasses","hovered","interactive","infoGrid","getInfoGridFromMouseTouchEvent","clientX","clientY","currentTarget","rect","getBoundingClientRect","touches","eventX","eventY","wordcloudhover","info","dimension","wordcloudclick","pointsAtRadius","getPointsAtRadius","radius","T","t","points","rx","exceedTime","Date","getTime","fillGridAt","fillRect","putWord","word","weight","attributes","rotateDeg","round","fontSize","mu","fcanvas","fctx","willReadFrequently","fw","fh","boxWidth","boxHeight","fgw","ceil","fgh","fillTextOffsetX","fillTextOffsetY","cgh","cgw","setAttribute","scale","translate","rotate","fillStyle","textBaseline","occupied","bounds","singleGridLoop","gw","gh","fillTextWidth","fillTextHeight","getTextInfo","r","tryToPutWordAtPoint","gxy","px","py","canFitText","distance","save","restore","span","transformRule","styleRules","cssProp","textContent","style","attribute","className","drawText","w","h","updateGrid","rot","concat","res","sendEvent","cancelable","createEvent","initCustomEvent","dispatchEvent","loopingFunction","stoppingFunction","clearRect","position","bctx","bgPixel","webkitTapHighlightColor","stopInteraction","listener","anotherWordCloudStart","loop","canceled","start","toFixed","module","exports","extendChartView","render","group","removeAll","text","dataIdx","textStyleModel","getModel","emphasisTextStyleModel","textEl","graphic","Text","setTextStyle","textFill","getItemVisual","rotation","add","setItemGraphicEl","setHoverStyle","forMerge","_model","remove"],"mappings":"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","file":"js/npm.echarts-wordcloud.90067f68.js","sourcesContent":["var echarts = require('echarts/lib/echarts');\nvar layoutUtil = require('echarts/lib/util/layout');\n\nrequire('./WordCloudSeries');\nrequire('./WordCloudView');\n\nvar wordCloudLayoutHelper = require('./layout');\n\nif (!wordCloudLayoutHelper.isSupported) {\n    throw new Error('Sorry your browser not support wordCloud');\n}\n\n// https://github.com/timdream/wordcloud2.js/blob/c236bee60436e048949f9becc4f0f67bd832dc5c/index.js#L233\nfunction updateCanvasMask(maskCanvas) {\n    var ctx = maskCanvas.getContext('2d');\n    var imageData = ctx.getImageData(\n        0, 0, maskCanvas.width, maskCanvas.height);\n    var newImageData = ctx.createImageData(imageData);\n\n    var toneSum = 0;\n    var toneCnt = 0;\n    for (var i = 0; i < imageData.data.length; i += 4) {\n        var alpha = imageData.data[i + 3];\n        if (alpha > 128) {\n            var tone = imageData.data[i]\n                + imageData.data[i + 1]\n                + imageData.data[i + 2];\n            toneSum += tone;\n            ++toneCnt;\n        }\n    }\n    var threshold = toneSum / toneCnt;\n\n    for (var i = 0; i < imageData.data.length; i += 4) {\n        var tone = imageData.data[i]\n            + imageData.data[i + 1]\n            + imageData.data[i + 2];\n        var alpha = imageData.data[i + 3];\n\n        if (alpha < 128 || tone > threshold) {\n            // Area not to draw\n            newImageData.data[i] = 0;\n            newImageData.data[i + 1] = 0;\n            newImageData.data[i + 2] = 0;\n            newImageData.data[i + 3] = 0;\n        }\n        else {\n            // Area to draw\n            // The color must be same with backgroundColor\n            newImageData.data[i] = 255;\n            newImageData.data[i + 1] = 255;\n            newImageData.data[i + 2] = 255;\n            newImageData.data[i + 3] = 255;\n        }\n    }\n\n    ctx.putImageData(newImageData, 0, 0);\n}\n\necharts.registerLayout(function (ecModel, api) {\n    ecModel.eachSeriesByType('wordCloud', function (seriesModel) {\n        var gridRect = layoutUtil.getLayoutRect(\n            seriesModel.getBoxLayoutParams(), {\n                width: api.getWidth(),\n                height: api.getHeight()\n            }\n        );\n        var data = seriesModel.getData();\n\n        var canvas = document.createElement('canvas');\n        canvas.width = gridRect.width;\n        canvas.height = gridRect.height;\n\n        var ctx = canvas.getContext('2d');\n        var maskImage = seriesModel.get('maskImage');\n        if (maskImage) {\n            try {\n                ctx.drawImage(maskImage, 0, 0, canvas.width, canvas.height);\n                updateCanvasMask(canvas);\n            }\n            catch (e) {\n                console.error('Invalid mask image');\n                console.error(e.toString());\n            }\n        }\n\n        var sizeRange = seriesModel.get('sizeRange');\n        var rotationRange = seriesModel.get('rotationRange');\n        var valueExtent = data.getDataExtent('value');\n\n        var DEGREE_TO_RAD = Math.PI / 180;\n        var gridSize = seriesModel.get('gridSize');\n        wordCloudLayoutHelper(canvas, {\n            list: data.mapArray('value', function (value, idx) {\n                var itemModel = data.getItemModel(idx);\n                return [\n                    data.getName(idx),\n                    itemModel.get('textStyle.normal.textSize', true)\n                        || echarts.number.linearMap(value, valueExtent, sizeRange),\n                    idx\n                ];\n            }).sort(function (a, b) {\n                // Sort from large to small in case there is no more room for more words\n                return b[1] - a[1];\n            }),\n            fontFamily: seriesModel.get('textStyle.normal.fontFamily')\n                || seriesModel.get('textStyle.emphasis.fontFamily')\n                || ecModel.get('textStyle.fontFamily'),\n            fontWeight: seriesModel.get('textStyle.normal.fontWeight')\n                || seriesModel.get('textStyle.emphasis.fontWeight')\n                || ecModel.get('textStyle.fontWeight'),\n            gridSize: gridSize,\n\n            ellipticity: gridRect.height / gridRect.width,\n\n            minRotation: rotationRange[0] * DEGREE_TO_RAD,\n            maxRotation: rotationRange[1] * DEGREE_TO_RAD,\n\n            clearCanvas: !maskImage,\n\n            rotateRatio: 1,\n\n            rotationStep: seriesModel.get('rotationStep') * DEGREE_TO_RAD,\n\n            drawOutOfBound: seriesModel.get('drawOutOfBound'),\n\n            shuffle: false,\n\n            shape: seriesModel.get('shape')\n        });\n\n        function onWordCloudDrawn(e) {\n            var item = e.detail.item;\n            if (e.detail.drawn && seriesModel.layoutInstance.ondraw) {\n                e.detail.drawn.gx += gridRect.x / gridSize;\n                e.detail.drawn.gy += gridRect.y / gridSize;\n                seriesModel.layoutInstance.ondraw(\n                    item[0], item[1], item[2], e.detail.drawn\n                );\n            }\n        }\n\n        canvas.addEventListener('wordclouddrawn', onWordCloudDrawn);\n\n        if (seriesModel.layoutInstance) {\n            // Dispose previous\n            seriesModel.layoutInstance.dispose();\n        }\n\n        seriesModel.layoutInstance = {\n            ondraw: null,\n\n            dispose: function () {\n                canvas.removeEventListener('wordclouddrawn', onWordCloudDrawn);\n                // Abort\n                canvas.addEventListener('wordclouddrawn', function (e) {\n                    // Prevent default to cancle the event and stop the loop\n                    e.preventDefault();\n                });\n            }\n        };\n    });\n});\n\necharts.registerPreprocessor(function (option) {\n    var series = (option || {}).series;\n    !echarts.util.isArray(series) && (series = series ? [series] : []);\n\n    var compats = ['shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\n\n    echarts.util.each(series, function (seriesItem) {\n        if (seriesItem && seriesItem.type === 'wordCloud') {\n            var textStyle = seriesItem.textStyle || {};\n\n            compatTextStyle(textStyle.normal);\n            compatTextStyle(textStyle.emphasis);\n        }\n    });\n\n    function compatTextStyle(textStyle) {\n        textStyle && echarts.util.each(compats, function (key) {\n            if (textStyle.hasOwnProperty(key)) {\n                textStyle['text' + echarts.format.capitalFirst(key)] = textStyle[key];\n            }\n        });\n    }\n});\n","var completeDimensions = require('echarts/lib/data/helper/completeDimensions');\nvar echarts = require('echarts/lib/echarts');\n\necharts.extendSeriesModel({\n\n    type: 'series.wordCloud',\n\n    visualColorAccessPath: 'textStyle.normal.color',\n\n    optionUpdated: function () {\n        var option = this.option;\n        option.gridSize = Math.max(Math.floor(option.gridSize), 4);\n    },\n\n    getInitialData: function (option, ecModel) {\n        var dimensions = completeDimensions(['value'], option.data);\n        var list = new echarts.List(dimensions, this);\n        list.initData(option.data);\n        return list;\n    },\n\n    // Most of options are from https://github.com/timdream/wordcloud2.js/blob/gh-pages/API.md\n    defaultOption: {\n\n        maskImage: null,\n\n        // Shape can be 'circle', 'cardioid', 'diamond', 'triangle-forward', 'triangle', 'pentagon', 'star'\n        shape: 'circle',\n\n        left: 'center',\n\n        top: 'center',\n\n        width: '70%',\n\n        height: '80%',\n\n        sizeRange: [12, 60],\n\n        rotationRange: [-90, 90],\n\n        rotationStep: 45,\n\n        gridSize: 8,\n\n        drawOutOfBound: false,\n\n        textStyle: {\n            normal: {\n                fontWeight: 'normal'\n            }\n        }\n    }\n});\n","/*!\n * wordcloud2.js\n * http://timdream.org/wordcloud2.js/\n *\n * Copyright 2011 - 2013 Tim Chien\n * Released under the MIT license\n */\n\n'use strict';\n\n// setImmediate\nif (!window.setImmediate) {\n  window.setImmediate = (function setupSetImmediate() {\n    return window.msSetImmediate ||\n    window.webkitSetImmediate ||\n    window.mozSetImmediate ||\n    window.oSetImmediate ||\n    (function setupSetZeroTimeout() {\n      if (!window.postMessage || !window.addEventListener) {\n        return null;\n      }\n\n      var callbacks = [undefined];\n      var message = 'zero-timeout-message';\n\n      // Like setTimeout, but only takes a function argument.  There's\n      // no time argument (always zero) and no arguments (you have to\n      // use a closure).\n      var setZeroTimeout = function setZeroTimeout(callback) {\n        var id = callbacks.length;\n        callbacks.push(callback);\n        window.postMessage(message + id.toString(36), '*');\n\n        return id;\n      };\n\n      window.addEventListener('message', function setZeroTimeoutMessage(evt) {\n        // Skipping checking event source, retarded IE confused this window\n        // object with another in the presence of iframe\n        if (typeof evt.data !== 'string' ||\n            evt.data.substr(0, message.length) !== message/* ||\n            evt.source !== window */) {\n          return;\n        }\n\n        evt.stopImmediatePropagation();\n\n        var id = parseInt(evt.data.substr(message.length), 36);\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id]();\n        callbacks[id] = undefined;\n      }, true);\n\n      /* specify clearImmediate() here since we need the scope */\n      window.clearImmediate = function clearZeroTimeout(id) {\n        if (!callbacks[id]) {\n          return;\n        }\n\n        callbacks[id] = undefined;\n      };\n\n      return setZeroTimeout;\n    })() ||\n    // fallback\n    function setImmediateFallback(fn) {\n      window.setTimeout(fn, 0);\n    };\n  })();\n}\n\nif (!window.clearImmediate) {\n  window.clearImmediate = (function setupClearImmediate() {\n    return window.msClearImmediate ||\n    window.webkitClearImmediate ||\n    window.mozClearImmediate ||\n    window.oClearImmediate ||\n    // \"clearZeroTimeout\" is implement on the previous block ||\n    // fallback\n    function clearImmediateFallback(timer) {\n      window.clearTimeout(timer);\n    };\n  })();\n}\n\n(function(global) {\n\n  // Check if WordCloud can run on this browser\n  var isSupported = (function isSupported() {\n    var canvas = document.createElement('canvas');\n    if (!canvas || !canvas.getContext) {\n      return false;\n    }\n\n    var ctx = canvas.getContext('2d');\n    if (!ctx.getImageData) {\n      return false;\n    }\n    if (!ctx.fillText) {\n      return false;\n    }\n\n    if (!Array.prototype.some) {\n      return false;\n    }\n    if (!Array.prototype.push) {\n      return false;\n    }\n\n    return true;\n  }());\n\n  // Find out if the browser impose minium font size by\n  // drawing small texts on a canvas and measure it's width.\n  var minFontSize = (function getMinFontSize() {\n    if (!isSupported) {\n      return;\n    }\n\n    var ctx = document.createElement('canvas').getContext('2d');\n\n    // start from 20\n    var size = 20;\n\n    // two sizes to measure\n    var hanWidth, mWidth;\n\n    while (size) {\n      ctx.font = size.toString(10) + 'px sans-serif';\n      if ((ctx.measureText('\\uFF37').width === hanWidth) &&\n          (ctx.measureText('m').width) === mWidth) {\n        return (size + 1);\n      }\n\n      hanWidth = ctx.measureText('\\uFF37').width;\n      mWidth = ctx.measureText('m').width;\n\n      size--;\n    }\n\n    return 0;\n  })();\n\n  // Based on http://jsfromhell.com/array/shuffle\n  var shuffleArray = function shuffleArray(arr) {\n    for (var j, x, i = arr.length; i;\n      j = Math.floor(Math.random() * i),\n      x = arr[--i], arr[i] = arr[j],\n      arr[j] = x) {}\n    return arr;\n  };\n\n  var WordCloud = function WordCloud(elements, options) {\n    if (!isSupported) {\n      return;\n    }\n\n    if (!Array.isArray(elements)) {\n      elements = [elements];\n    }\n\n    elements.forEach(function(el, i) {\n      if (typeof el === 'string') {\n        elements[i] = document.getElementById(el);\n        if (!elements[i]) {\n          throw 'The element id specified is not found.';\n        }\n      } else if (!el.tagName && !el.appendChild) {\n        throw 'You must pass valid HTML elements, or ID of the element.';\n      }\n    });\n\n    /* Default values to be overwritten by options object */\n    var settings = {\n      list: [],\n      fontFamily: '\"Trebuchet MS\", \"Heiti TC\", \"微軟正黑體\", ' +\n                  '\"Arial Unicode MS\", \"Droid Fallback Sans\", sans-serif',\n      fontWeight: 'normal',\n      color: 'random-dark',\n      minSize: 0, // 0 to disable\n      weightFactor: 1,\n      clearCanvas: true,\n      backgroundColor: '#fff',  // opaque white = rgba(255, 255, 255, 1)\n\n      gridSize: 8,\n      drawOutOfBound: false,\n      origin: null,\n\n      drawMask: false,\n      maskColor: 'rgba(255,0,0,0.3)',\n      maskGapWidth: 0.3,\n\n      wait: 0,\n      abortThreshold: 0, // disabled\n      abort: function noop() {},\n\n      minRotation: - Math.PI / 2,\n      maxRotation: Math.PI / 2,\n      rotationStep: 0.1,\n\n      shuffle: true,\n      rotateRatio: 0.1,\n\n      shape: 'circle',\n      ellipticity: 0.65,\n\n      classes: null,\n\n      hover: null,\n      click: null\n    };\n\n    if (options) {\n      for (var key in options) {\n        if (key in settings) {\n          settings[key] = options[key];\n        }\n      }\n    }\n\n    /* Convert weightFactor into a function */\n    if (typeof settings.weightFactor !== 'function') {\n      var factor = settings.weightFactor;\n      settings.weightFactor = function weightFactor(pt) {\n        return pt * factor; //in px\n      };\n    }\n\n    /* Convert shape into a function */\n    if (typeof settings.shape !== 'function') {\n      switch (settings.shape) {\n        case 'circle':\n        /* falls through */\n        default:\n          // 'circle' is the default and a shortcut in the code loop.\n          settings.shape = 'circle';\n          break;\n\n        case 'cardioid':\n          settings.shape = function shapeCardioid(theta) {\n            return 1 - Math.sin(theta);\n          };\n          break;\n\n        /*\n        To work out an X-gon, one has to calculate \"m\",\n        where 1/(cos(2*PI/X)+m*sin(2*PI/X)) = 1/(cos(0)+m*sin(0))\n        http://www.wolframalpha.com/input/?i=1%2F%28cos%282*PI%2FX%29%2Bm*sin%28\n        2*PI%2FX%29%29+%3D+1%2F%28cos%280%29%2Bm*sin%280%29%29\n        Copy the solution into polar equation r = 1/(cos(t') + m*sin(t'))\n        where t' equals to mod(t, 2PI/X);\n        */\n\n        case 'diamond':\n        case 'square':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+PI%2F2%29%29%2Bsin%28mod+%28t%2C+PI%2F2%29%29%29%2C+t+%3D\n          // +0+..+2*PI\n          settings.shape = function shapeSquare(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 4);\n            return 1 / (Math.cos(thetaPrime) + Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle-forward':\n          // http://www.wolframalpha.com/input/?i=plot+r+%3D+1%2F%28cos%28mod+\n          // %28t%2C+2*PI%2F3%29%29%2Bsqrt%283%29sin%28mod+%28t%2C+2*PI%2F3%29\n          // %29%29%2C+t+%3D+0+..+2*PI\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = theta % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'triangle':\n        case 'triangle-upright':\n          settings.shape = function shapeTriangle(theta) {\n            var thetaPrime = (theta + Math.PI * 3 / 2) % (2 * Math.PI / 3);\n            return 1 / (Math.cos(thetaPrime) +\n                        Math.sqrt(3) * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'pentagon':\n          settings.shape = function shapePentagon(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 5);\n            return 1 / (Math.cos(thetaPrime) +\n                        0.726543 * Math.sin(thetaPrime));\n          };\n          break;\n\n        case 'star':\n          settings.shape = function shapeStar(theta) {\n            var thetaPrime = (theta + 0.955) % (2 * Math.PI / 10);\n            if ((theta + 0.955) % (2 * Math.PI / 5) - (2 * Math.PI / 10) >= 0) {\n              return 1 / (Math.cos((2 * Math.PI / 10) - thetaPrime) +\n                          3.07768 * Math.sin((2 * Math.PI / 10) - thetaPrime));\n            } else {\n              return 1 / (Math.cos(thetaPrime) +\n                          3.07768 * Math.sin(thetaPrime));\n            }\n          };\n          break;\n      }\n    }\n\n    /* Make sure gridSize is a whole number and is not smaller than 4px */\n    settings.gridSize = Math.max(Math.floor(settings.gridSize), 4);\n\n    /* shorthand */\n    var g = settings.gridSize;\n    var maskRectWidth = g - settings.maskGapWidth;\n\n    /* normalize rotation settings */\n    var rotationRange = Math.abs(settings.maxRotation - settings.minRotation);\n    var minRotation = Math.min(settings.maxRotation, settings.minRotation);\n    var rotationStep = settings.rotationStep;\n\n    /* information/object available to all functions, set when start() */\n    var grid, // 2d array containing filling information\n      ngx, ngy, // width and height of the grid\n      center, // position of the center of the cloud\n      maxRadius;\n\n    /* timestamp for measuring each putWord() action */\n    var escapeTime;\n\n    /* function for getting the color of the text */\n    var getTextColor;\n    function random_hsl_color(min, max) {\n      return 'hsl(' +\n        (Math.random() * 360).toFixed() + ',' +\n        (Math.random() * 30 + 70).toFixed() + '%,' +\n        (Math.random() * (max - min) + min).toFixed() + '%)';\n    }\n    switch (settings.color) {\n      case 'random-dark':\n        getTextColor = function getRandomDarkColor() {\n          return random_hsl_color(10, 50);\n        };\n        break;\n\n      case 'random-light':\n        getTextColor = function getRandomLightColor() {\n          return random_hsl_color(50, 90);\n        };\n        break;\n\n      default:\n        if (typeof settings.color === 'function') {\n          getTextColor = settings.color;\n        }\n        break;\n    }\n\n    /* function for getting the classes of the text */\n    var getTextClasses = null;\n    if (typeof settings.classes === 'function') {\n      getTextClasses = settings.classes;\n    }\n\n    /* Interactive */\n    var interactive = false;\n    var infoGrid = [];\n    var hovered;\n\n    var getInfoGridFromMouseTouchEvent =\n    function getInfoGridFromMouseTouchEvent(evt) {\n      var canvas = evt.currentTarget;\n      var rect = canvas.getBoundingClientRect();\n      var clientX;\n      var clientY;\n      /** Detect if touches are available */\n      if (evt.touches) {\n        clientX = evt.touches[0].clientX;\n        clientY = evt.touches[0].clientY;\n      } else {\n        clientX = evt.clientX;\n        clientY = evt.clientY;\n      }\n      var eventX = clientX - rect.left;\n      var eventY = clientY - rect.top;\n\n      var x = Math.floor(eventX * ((canvas.width / rect.width) || 1) / g);\n      var y = Math.floor(eventY * ((canvas.height / rect.height) || 1) / g);\n\n      return infoGrid[x][y];\n    };\n\n    var wordcloudhover = function wordcloudhover(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n\n      if (hovered === info) {\n        return;\n      }\n\n      hovered = info;\n      if (!info) {\n        settings.hover(undefined, undefined, evt);\n\n        return;\n      }\n\n      settings.hover(info.item, info.dimension, evt);\n\n    };\n\n    var wordcloudclick = function wordcloudclick(evt) {\n      var info = getInfoGridFromMouseTouchEvent(evt);\n      if (!info) {\n        return;\n      }\n\n      settings.click(info.item, info.dimension, evt);\n      evt.preventDefault();\n    };\n\n    /* Get points on the grid for a given radius away from the center */\n    var pointsAtRadius = [];\n    var getPointsAtRadius = function getPointsAtRadius(radius) {\n      if (pointsAtRadius[radius]) {\n        return pointsAtRadius[radius];\n      }\n\n      // Look for these number of points on each radius\n      var T = radius * 8;\n\n      // Getting all the points at this radius\n      var t = T;\n      var points = [];\n\n      if (radius === 0) {\n        points.push([center[0], center[1], 0]);\n      }\n\n      while (t--) {\n        // distort the radius to put the cloud in shape\n        var rx = 1;\n        if (settings.shape !== 'circle') {\n          rx = settings.shape(t / T * 2 * Math.PI); // 0 to 1\n        }\n\n        // Push [x, y, t]; t is used solely for getTextColor()\n        points.push([\n          center[0] + radius * rx * Math.cos(-t / T * 2 * Math.PI),\n          center[1] + radius * rx * Math.sin(-t / T * 2 * Math.PI) *\n            settings.ellipticity,\n          t / T * 2 * Math.PI]);\n      }\n\n      pointsAtRadius[radius] = points;\n      return points;\n    };\n\n    /* Return true if we had spent too much time */\n    var exceedTime = function exceedTime() {\n      return ((settings.abortThreshold > 0) &&\n        ((new Date()).getTime() - escapeTime > settings.abortThreshold));\n    };\n\n    /* Get the deg of rotation according to settings, and luck. */\n    var getRotateDeg = function getRotateDeg() {\n      if (settings.rotateRatio === 0) {\n        return 0;\n      }\n\n      if (Math.random() > settings.rotateRatio) {\n        return 0;\n      }\n\n      if (rotationRange === 0) {\n        return minRotation;\n      }\n\n      return minRotation + Math.round(Math.random() * rotationRange / rotationStep) * rotationStep;\n    };\n\n    var getTextInfo = function getTextInfo(word, weight, rotateDeg) {\n      // calculate the acutal font size\n      // fontSize === 0 means weightFactor function wants the text skipped,\n      // and size < minSize means we cannot draw the text.\n      var debug = false;\n      var fontSize = settings.weightFactor(weight);\n      if (fontSize <= settings.minSize) {\n        return false;\n      }\n\n      // Scale factor here is to make sure fillText is not limited by\n      // the minium font size set by browser.\n      // It will always be 1 or 2n.\n      var mu = 1;\n      if (fontSize < minFontSize) {\n        mu = (function calculateScaleFactor() {\n          var mu = 2;\n          while (mu * fontSize < minFontSize) {\n            mu += 2;\n          }\n          return mu;\n        })();\n      }\n\n      var fcanvas = document.createElement('canvas');\n      var fctx = fcanvas.getContext('2d', { willReadFrequently: true });\n\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Estimate the dimension of the text with measureText().\n      var fw = fctx.measureText(word).width / mu;\n      var fh = Math.max(fontSize * mu,\n                        fctx.measureText('m').width,\n                        fctx.measureText('\\uFF37').width) / mu;\n\n      // Create a boundary box that is larger than our estimates,\n      // so text don't get cut of (it sill might)\n      var boxWidth = fw + fh * 2;\n      var boxHeight = fh * 3;\n      var fgw = Math.ceil(boxWidth / g);\n      var fgh = Math.ceil(boxHeight / g);\n      boxWidth = fgw * g;\n      boxHeight = fgh * g;\n\n      // Calculate the proper offsets to make the text centered at\n      // the preferred position.\n\n      // This is simply half of the width.\n      var fillTextOffsetX = - fw / 2;\n      // Instead of moving the box to the exact middle of the preferred\n      // position, for Y-offset we move 0.4 instead, so Latin alphabets look\n      // vertical centered.\n      var fillTextOffsetY = - fh * 0.4;\n\n      // Calculate the actual dimension of the canvas, considering the rotation.\n      var cgh = Math.ceil((boxWidth * Math.abs(Math.sin(rotateDeg)) +\n                           boxHeight * Math.abs(Math.cos(rotateDeg))) / g);\n      var cgw = Math.ceil((boxWidth * Math.abs(Math.cos(rotateDeg)) +\n                           boxHeight * Math.abs(Math.sin(rotateDeg))) / g);\n      var width = cgw * g;\n      var height = cgh * g;\n\n      fcanvas.setAttribute('width', width);\n      fcanvas.setAttribute('height', height);\n\n      if (debug) {\n        // Attach fcanvas to the DOM\n        document.body.appendChild(fcanvas);\n        // Save it's state so that we could restore and draw the grid correctly.\n        fctx.save();\n      }\n\n      // Scale the canvas with |mu|.\n      fctx.scale(1 / mu, 1 / mu);\n      fctx.translate(width * mu / 2, height * mu / 2);\n      fctx.rotate(- rotateDeg);\n\n      // Once the width/height is set, ctx info will be reset.\n      // Set it again here.\n      fctx.font = settings.fontWeight + ' ' +\n        (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n\n      // Fill the text into the fcanvas.\n      // XXX: We cannot because textBaseline = 'top' here because\n      // Firefox and Chrome uses different default line-height for canvas.\n      // Please read https://bugzil.la/737852#c6.\n      // Here, we use textBaseline = 'middle' and draw the text at exactly\n      // 0.5 * fontSize lower.\n      fctx.fillStyle = '#000';\n      fctx.textBaseline = 'middle';\n      fctx.fillText(word, fillTextOffsetX * mu,\n                    (fillTextOffsetY + fontSize * 0.5) * mu);\n\n      // Get the pixels of the text\n      var imageData = fctx.getImageData(0, 0, width, height).data;\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      if (debug) {\n        // Draw the box of the original estimation\n        fctx.strokeRect(fillTextOffsetX * mu,\n                        fillTextOffsetY, fw * mu, fh * mu);\n        fctx.restore();\n      }\n\n      // Read the pixels and save the information to the occupied array\n      var occupied = [];\n      var gx = cgw, gy, x, y;\n      var bounds = [cgh / 2, cgw / 2, cgh / 2, cgw / 2];\n      while (gx--) {\n        gy = cgh;\n        while (gy--) {\n          y = g;\n          singleGridLoop: {\n            while (y--) {\n              x = g;\n              while (x--) {\n                if (imageData[((gy * g + y) * width +\n                               (gx * g + x)) * 4 + 3]) {\n                  occupied.push([gx, gy]);\n\n                  if (gx < bounds[3]) {\n                    bounds[3] = gx;\n                  }\n                  if (gx > bounds[1]) {\n                    bounds[1] = gx;\n                  }\n                  if (gy < bounds[0]) {\n                    bounds[0] = gy;\n                  }\n                  if (gy > bounds[2]) {\n                    bounds[2] = gy;\n                  }\n\n                  if (debug) {\n                    fctx.fillStyle = 'rgba(255, 0, 0, 0.5)';\n                    fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n                  }\n                  break singleGridLoop;\n                }\n              }\n            }\n            if (debug) {\n              fctx.fillStyle = 'rgba(0, 0, 255, 0.5)';\n              fctx.fillRect(gx * g, gy * g, g - 0.5, g - 0.5);\n            }\n          }\n        }\n      }\n\n      if (debug) {\n        fctx.fillStyle = 'rgba(0, 255, 0, 0.5)';\n        fctx.fillRect(bounds[3] * g,\n                      bounds[0] * g,\n                      (bounds[1] - bounds[3] + 1) * g,\n                      (bounds[2] - bounds[0] + 1) * g);\n      }\n\n      // Return information needed to create the text on the real canvas\n      return {\n        mu: mu,\n        occupied: occupied,\n        bounds: bounds,\n        gw: cgw,\n        gh: cgh,\n        fillTextOffsetX: fillTextOffsetX,\n        fillTextOffsetY: fillTextOffsetY,\n        fillTextWidth: fw,\n        fillTextHeight: fh,\n        fontSize: fontSize\n      };\n    };\n\n    /* Determine if there is room available in the given dimension */\n    var canFitText = function canFitText(gx, gy, gw, gh, occupied) {\n      // Go through the occupied points,\n      // return false if the space is not available.\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          if (!settings.drawOutOfBound) {\n            return false;\n          }\n          continue;\n        }\n\n        if (!grid[px][py]) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    /* Actually draw the text on the grid */\n    var drawText = function drawText(gx, gy, info, word, weight,\n                                     distance, theta, rotateDeg, attributes) {\n\n      var fontSize = info.fontSize;\n      var color;\n      if (getTextColor) {\n        color = getTextColor(word, weight, fontSize, distance, theta);\n      } else {\n        color = settings.color;\n      }\n\n      var classes;\n      if (getTextClasses) {\n        classes = getTextClasses(word, weight, fontSize, distance, theta);\n      } else {\n        classes = settings.classes;\n      }\n\n      var dimension;\n      var bounds = info.bounds;\n      dimension = {\n        x: (gx + bounds[3]) * g,\n        y: (gy + bounds[0]) * g,\n        w: (bounds[1] - bounds[3] + 1) * g,\n        h: (bounds[2] - bounds[0] + 1) * g\n      };\n\n      elements.forEach(function(el) {\n        if (el.getContext) {\n          var ctx = el.getContext('2d');\n          var mu = info.mu;\n\n          // Save the current state before messing it\n          ctx.save();\n          ctx.scale(1 / mu, 1 / mu);\n\n          ctx.font = settings.fontWeight + ' ' +\n                     (fontSize * mu).toString(10) + 'px ' + settings.fontFamily;\n          ctx.fillStyle = color;\n\n          // Translate the canvas position to the origin coordinate of where\n          // the text should be put.\n          ctx.translate((gx + info.gw / 2) * g * mu,\n                        (gy + info.gh / 2) * g * mu);\n\n          if (rotateDeg !== 0) {\n            ctx.rotate(- rotateDeg);\n          }\n\n          // Finally, fill the text.\n\n          // XXX: We cannot because textBaseline = 'top' here because\n          // Firefox and Chrome uses different default line-height for canvas.\n          // Please read https://bugzil.la/737852#c6.\n          // Here, we use textBaseline = 'middle' and draw the text at exactly\n          // 0.5 * fontSize lower.\n          ctx.textBaseline = 'middle';\n          ctx.fillText(word, info.fillTextOffsetX * mu,\n                             (info.fillTextOffsetY + fontSize * 0.5) * mu);\n\n          // The below box is always matches how <span>s are positioned\n          /* ctx.strokeRect(info.fillTextOffsetX, info.fillTextOffsetY,\n            info.fillTextWidth, info.fillTextHeight); */\n\n          // Restore the state.\n          ctx.restore();\n        } else {\n          // drawText on DIV element\n          var span = document.createElement('span');\n          var transformRule = '';\n          transformRule = 'rotate(' + (- rotateDeg / Math.PI * 180) + 'deg) ';\n          if (info.mu !== 1) {\n            transformRule +=\n              'translateX(-' + (info.fillTextWidth / 4) + 'px) ' +\n              'scale(' + (1 / info.mu) + ')';\n          }\n          var styleRules = {\n            'position': 'absolute',\n            'display': 'block',\n            'font': settings.fontWeight + ' ' +\n                    (fontSize * info.mu) + 'px ' + settings.fontFamily,\n            'left': ((gx + info.gw / 2) * g + info.fillTextOffsetX) + 'px',\n            'top': ((gy + info.gh / 2) * g + info.fillTextOffsetY) + 'px',\n            'width': info.fillTextWidth + 'px',\n            'height': info.fillTextHeight + 'px',\n            'lineHeight': fontSize + 'px',\n            'whiteSpace': 'nowrap',\n            'transform': transformRule,\n            'webkitTransform': transformRule,\n            'msTransform': transformRule,\n            'transformOrigin': '50% 40%',\n            'webkitTransformOrigin': '50% 40%',\n            'msTransformOrigin': '50% 40%'\n          };\n          if (color) {\n            styleRules.color = color;\n          }\n          span.textContent = word;\n          for (var cssProp in styleRules) {\n            span.style[cssProp] = styleRules[cssProp];\n          }\n          if (attributes) {\n            for (var attribute in attributes) {\n              span.setAttribute(attribute, attributes[attribute]);\n            }\n          }\n          if (classes) {\n            span.className += classes;\n          }\n          el.appendChild(span);\n        }\n      });\n    };\n\n    /* Help function to updateGrid */\n    var fillGridAt = function fillGridAt(x, y, drawMask, dimension, item) {\n      if (x >= ngx || y >= ngy || x < 0 || y < 0) {\n        return;\n      }\n\n      grid[x][y] = false;\n\n      if (drawMask) {\n        var ctx = elements[0].getContext('2d');\n        ctx.fillRect(x * g, y * g, maskRectWidth, maskRectWidth);\n      }\n\n      if (interactive) {\n        infoGrid[x][y] = { item: item, dimension: dimension };\n      }\n    };\n\n    /* Update the filling information of the given space with occupied points.\n       Draw the mask on the canvas if necessary. */\n    var updateGrid = function updateGrid(gx, gy, gw, gh, info, item) {\n      var occupied = info.occupied;\n      var drawMask = settings.drawMask;\n      var ctx;\n      if (drawMask) {\n        ctx = elements[0].getContext('2d');\n        ctx.save();\n        ctx.fillStyle = settings.maskColor;\n      }\n\n      var dimension;\n      if (interactive) {\n        var bounds = info.bounds;\n        dimension = {\n          x: (gx + bounds[3]) * g,\n          y: (gy + bounds[0]) * g,\n          w: (bounds[1] - bounds[3] + 1) * g,\n          h: (bounds[2] - bounds[0] + 1) * g\n        };\n      }\n\n      var i = occupied.length;\n      while (i--) {\n        var px = gx + occupied[i][0];\n        var py = gy + occupied[i][1];\n\n        if (px >= ngx || py >= ngy || px < 0 || py < 0) {\n          continue;\n        }\n\n        fillGridAt(px, py, drawMask, dimension, item);\n      }\n\n      if (drawMask) {\n        ctx.restore();\n      }\n    };\n\n    /* putWord() processes each item on the list,\n       calculate it's size and determine it's position, and actually\n       put it on the canvas. */\n    var putWord = function putWord(item) {\n      var word, weight, attributes;\n      if (Array.isArray(item)) {\n        word = item[0];\n        weight = item[1];\n      } else {\n        word = item.word;\n        weight = item.weight;\n        attributes = item.attributes;\n      }\n      var rotateDeg = getRotateDeg();\n\n      // get info needed to put the text onto the canvas\n      var info = getTextInfo(word, weight, rotateDeg);\n\n      // not getting the info means we shouldn't be drawing this one.\n      if (!info) {\n        return false;\n      }\n\n      if (exceedTime()) {\n        return false;\n      }\n\n      // If drawOutOfBound is set to false,\n      // skip the loop if we have already know the bounding box of\n      // word is larger than the canvas.\n      if (!settings.drawOutOfBound) {\n        var bounds = info.bounds;\n        if ((bounds[1] - bounds[3] + 1) > ngx ||\n          (bounds[2] - bounds[0] + 1) > ngy) {\n          return false;\n        }\n      }\n\n      // Determine the position to put the text by\n      // start looking for the nearest points\n      var r = maxRadius + 1;\n\n      var tryToPutWordAtPoint = function(gxy) {\n        var gx = Math.floor(gxy[0] - info.gw / 2);\n        var gy = Math.floor(gxy[1] - info.gh / 2);\n        var gw = info.gw;\n        var gh = info.gh;\n\n        // If we cannot fit the text at this position, return false\n        // and go to the next position.\n        if (!canFitText(gx, gy, gw, gh, info.occupied)) {\n          return false;\n        }\n\n        // Actually put the text on the canvas\n        drawText(gx, gy, info, word, weight,\n                 (maxRadius - r), gxy[2], rotateDeg, attributes);\n\n        // Mark the spaces on the grid as filled\n        updateGrid(gx, gy, gw, gh, info, item);\n\n        return {\n          gx: gx,\n          gy: gy,\n          rot: rotateDeg,\n          info: info\n        };\n      };\n\n      while (r--) {\n        var points = getPointsAtRadius(maxRadius - r);\n\n        if (settings.shuffle) {\n          points = [].concat(points);\n          shuffleArray(points);\n        }\n\n        // Try to fit the words by looking at each point.\n        // array.some() will stop and return true\n        // when putWordAtPoint() returns true.\n        for (var i = 0; i < points.length; i++) {\n          var res = tryToPutWordAtPoint(points[i]);\n          if (res) {\n            return res;\n          }\n        }\n\n        // var drawn = points.some(tryToPutWordAtPoint);\n        // if (drawn) {\n        //   // leave putWord() and return true\n        //   return true;\n        // }\n      }\n      // we tried all distances but text won't fit, return null\n      return null;\n    };\n\n    /* Send DOM event to all elements. Will stop sending event and return\n       if the previous one is canceled (for cancelable events). */\n    var sendEvent = function sendEvent(type, cancelable, detail) {\n      if (cancelable) {\n        return !elements.some(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          return !el.dispatchEvent(evt);\n        }, this);\n      } else {\n        elements.forEach(function(el) {\n          var evt = document.createEvent('CustomEvent');\n          evt.initCustomEvent(type, true, cancelable, detail || {});\n          el.dispatchEvent(evt);\n        }, this);\n      }\n    };\n\n    /* Start drawing on a canvas */\n    var start = function start() {\n      // For dimensions, clearCanvas etc.,\n      // we only care about the first element.\n      var canvas = elements[0];\n\n      if (canvas.getContext) {\n        ngx = Math.ceil(canvas.width / g);\n        ngy = Math.ceil(canvas.height / g);\n      } else {\n        var rect = canvas.getBoundingClientRect();\n        ngx = Math.ceil(rect.width / g);\n        ngy = Math.ceil(rect.height / g);\n      }\n\n      // Sending a wordcloudstart event which cause the previous loop to stop.\n      // Do nothing if the event is canceled.\n      if (!sendEvent('wordcloudstart', true)) {\n        return;\n      }\n\n      // Determine the center of the word cloud\n      center = (settings.origin) ?\n        [settings.origin[0]/g, settings.origin[1]/g] :\n        [ngx / 2, ngy / 2];\n\n      // Maxium radius to look for space\n      maxRadius = Math.floor(Math.sqrt(ngx * ngx + ngy * ngy));\n\n      /* Clear the canvas only if the clearCanvas is set,\n         if not, update the grid to the current canvas state */\n      grid = [];\n\n      var gx, gy, i;\n      if (!canvas.getContext || settings.clearCanvas) {\n        elements.forEach(function(el) {\n          if (el.getContext) {\n            var ctx = el.getContext('2d');\n            ctx.fillStyle = settings.backgroundColor;\n            ctx.clearRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n            ctx.fillRect(0, 0, ngx * (g + 1), ngy * (g + 1));\n          } else {\n            el.textContent = '';\n            el.style.backgroundColor = settings.backgroundColor;\n            el.style.position = 'relative';\n          }\n        });\n\n        /* fill the grid with empty state */\n        gx = ngx;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            grid[gx][gy] = true;\n          }\n        }\n      } else {\n        /* Determine bgPixel by creating\n           another canvas and fill the specified background color. */\n        var bctx = document.createElement('canvas').getContext('2d');\n\n        bctx.fillStyle = settings.backgroundColor;\n        bctx.fillRect(0, 0, 1, 1);\n        var bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n        /* Read back the pixels of the canvas we got to tell which part of the\n           canvas is empty.\n           (no clearCanvas only works with a canvas, not divs) */\n        var imageData =\n          canvas.getContext('2d').getImageData(0, 0, ngx * g, ngy * g).data;\n\n        gx = ngx;\n        var x, y;\n        while (gx--) {\n          grid[gx] = [];\n          gy = ngy;\n          while (gy--) {\n            y = g;\n            singleGridLoop: while (y--) {\n              x = g;\n              while (x--) {\n                i = 4;\n                while (i--) {\n                  if (imageData[((gy * g + y) * ngx * g +\n                                 (gx * g + x)) * 4 + i] !== bgPixel[i]) {\n                    grid[gx][gy] = false;\n                    break singleGridLoop;\n                  }\n                }\n              }\n            }\n            if (grid[gx][gy] !== false) {\n              grid[gx][gy] = true;\n            }\n          }\n        }\n\n        imageData = bctx = bgPixel = undefined;\n      }\n\n      // fill the infoGrid with empty state if we need it\n      if (settings.hover || settings.click) {\n\n        interactive = true;\n\n        /* fill the grid with empty state */\n        gx = ngx + 1;\n        while (gx--) {\n          infoGrid[gx] = [];\n        }\n\n        if (settings.hover) {\n          canvas.addEventListener('mousemove', wordcloudhover);\n        }\n\n        if (settings.click) {\n          canvas.addEventListener('click', wordcloudclick);\n          canvas.addEventListener('touchstart', wordcloudclick);\n          canvas.addEventListener('touchend', function (e) {\n            e.preventDefault();\n          });\n          canvas.style.webkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n        }\n\n        canvas.addEventListener('wordcloudstart', function stopInteraction() {\n          canvas.removeEventListener('wordcloudstart', stopInteraction);\n\n          canvas.removeEventListener('mousemove', wordcloudhover);\n          canvas.removeEventListener('click', wordcloudclick);\n          hovered = undefined;\n        });\n      }\n\n      i = 0;\n      var loopingFunction, stoppingFunction;\n      if (settings.wait !== 0) {\n        loopingFunction = window.setTimeout;\n        stoppingFunction = window.clearTimeout;\n      } else {\n        loopingFunction = window.setImmediate;\n        stoppingFunction = window.clearImmediate;\n      }\n\n      var addEventListener = function addEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.addEventListener(type, listener);\n        }, this);\n      };\n\n      var removeEventListener = function removeEventListener(type, listener) {\n        elements.forEach(function(el) {\n          el.removeEventListener(type, listener);\n        }, this);\n      };\n\n      var anotherWordCloudStart = function anotherWordCloudStart() {\n        removeEventListener('wordcloudstart', anotherWordCloudStart);\n        stoppingFunction(timer);\n      };\n\n      addEventListener('wordcloudstart', anotherWordCloudStart);\n\n      var timer = loopingFunction(function loop() {\n        if (i >= settings.list.length) {\n          stoppingFunction(timer);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n\n          return;\n        }\n        escapeTime = (new Date()).getTime();\n        var drawn = putWord(settings.list[i]);\n        var canceled = !sendEvent('wordclouddrawn', true, {\n          item: settings.list[i], drawn: drawn });\n        if (exceedTime() || canceled) {\n          stoppingFunction(timer);\n          settings.abort();\n          sendEvent('wordcloudabort', false);\n          sendEvent('wordcloudstop', false);\n          removeEventListener('wordcloudstart', anotherWordCloudStart);\n          return;\n        }\n        i++;\n        timer = loopingFunction(loop, settings.wait);\n      }, settings.wait);\n    };\n\n    // All set, start the drawing\n    start();\n  };\n\n  WordCloud.isSupported = isSupported;\n  WordCloud.minFontSize = minFontSize;\n\n  // Expose the library as an AMD module\n  if (typeof define === 'function' && define.amd) {\n    define('wordcloud', [], function() { return WordCloud; });\n  } else if (typeof module !== 'undefined' && module.exports) {\n    module.exports = WordCloud;\n  } else {\n    global.WordCloud = WordCloud;\n  }\n\n})(this); //jshint ignore:line","module.exports = require('./src/wordCloud');","var echarts = require('echarts/lib/echarts');\n\nfunction getShallow(model, path) {\n    return model && model.getShallow(path);\n}\n\necharts.extendChartView({\n\n    type: 'wordCloud',\n\n    render: function (seriesModel, ecModel, api) {\n        var group = this.group;\n        group.removeAll();\n\n        var data = seriesModel.getData();\n\n        var gridSize = seriesModel.get('gridSize');\n\n        seriesModel.layoutInstance.ondraw = function (text, size, dataIdx, drawn) {\n            var itemModel = data.getItemModel(dataIdx);\n            var textStyleModel = itemModel.getModel('textStyle.normal');\n            var emphasisTextStyleModel = itemModel.getModel('textStyle.emphasis');\n\n            var textEl = new echarts.graphic.Text({\n                style: echarts.graphic.setTextStyle({}, textStyleModel, {\n                    x: drawn.info.fillTextOffsetX,\n                    y: drawn.info.fillTextOffsetY + size * 0.5,\n                    text: text,\n                    textBaseline: 'middle',\n                    textFill: data.getItemVisual(dataIdx, 'color'),\n                    fontSize: size\n                }),\n                scale: [1 / drawn.info.mu, 1 / drawn.info.mu],\n                position: [\n                    (drawn.gx + drawn.info.gw / 2) * gridSize,\n                    (drawn.gy + drawn.info.gh / 2) * gridSize\n                ],\n                rotation: drawn.rot\n            });\n\n            group.add(textEl);\n\n            data.setItemGraphicEl(dataIdx, textEl);\n\n            echarts.graphic.setHoverStyle(\n                textEl,\n                echarts.graphic.setTextStyle({}, emphasisTextStyleModel, null, {forMerge: true}, true)\n            );\n        };\n\n        this._model = seriesModel;\n    },\n\n    remove: function () {\n        this.group.removeAll();\n\n        this._model.layoutInstance.dispose();\n    },\n\n    dispose: function () {\n        this._model.layoutInstance.dispose();\n    }\n});\n"],"sourceRoot":""}